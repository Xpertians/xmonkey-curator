    def handle_ar(self, filepath):
        strings = self.handle_strings(filepath)
        if (path.exists(filepath)):
            cmd = 'ar -t ' + filepath
            process = subprocess.Popen(
                cmd,
                shell=True,
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE)
            (result, error) = process.communicate()
            rc = process.wait()
            process.stdout.close()
            rstTXT = result.decode('utf-8').replace('/', '')
            results = re.compile(r'\W+', re.UNICODE).split(
                ' '.join(rstTXT.split()))
            rst = strings + results
            rst = list(dict.fromkeys(rst))
            rst = list(filter(lambda el: len(el) > 5, rst))
        return rst

    def handle_mach_o(self, filepath):
        symbols = []
        if os.stat(filepath).st_size <= 1048576:
            libSO = lief.parse(filepath)
            remove_digits = str.maketrans(',', ',', digits)
            for i in libSO.symbols:
                symbol = i.name
                symbol = re.sub("[^a-zA-Z0-9]+", ",", symbol)
                symbol = re.sub("\d+", ",", symbol)
                symbols.extend(symbol.split(','))
            symbols = list(set(symbols))
            while ("" in symbols):
                symbols.remove("")
            rst = ",".join(symbols)
        if len(symbols) <= 1:
            rst = self.handle_strings(filepath)

        return rst

    def handle_zlib(self, filepath):
        f = open(filepath, 'rb')
        decomp_data = zlib.decompress(f.read())
        string = str(decomp_data)
        data = re.sub(r"[^a-zA-Z\ ._\-]+", ",", string)
        symbols = []
        count = 0
        window = 5
        charslist = []
        printable = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz"
        printable = printable+"-_.1234567890"
        for character in data:
            if character in printable:
                charslist.append(character)
                count += 1
            else:
                if count >= window:
                    symbols.append(''.join(charslist[-count:]))
                    count = 0
        if count >= window:
            symbols.append(''.join(charslist[-count:]))
        return symbols

    def handle_sharedlib(self, filepath):
        libSO = lief.parse(filepath)
        symbols = []
        iter = filter(lambda e: e.exported, libSO.dynamic_symbols)
        for idx, lsym in enumerate(iter):
            symbols.extend(self.demangle(lsym.name))
        rst = list(set(symbols))
        if not rst:
            rst = self.get_strings(filepath)
        return rst
